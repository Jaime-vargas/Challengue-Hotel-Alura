/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.hotelAlura.views;

import com.formdev.flatlaf.FlatLightLaf;
import com.hotelAlura.Util.InterfaceUtil;
import com.hotelAlura.controllers.GuestController;
import com.hotelAlura.models.Guest;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jaime
 */
public class RegisteredGuests extends javax.swing.JFrame {

    private InterfaceUtil interfaceUtil;
    private DefaultTableModel model;
    private List<Guest> guests;
    private ImageIcon closeIcon;

    /**
     * Creates new form Client
     *
     * @param interfaceUtil
     */
    public RegisteredGuests(InterfaceUtil interfaceUtil) {

        this.interfaceUtil = interfaceUtil;
        FlatLightLaf.setup();
        initComponents();
        loadImages();
        updateList();
        fillTable();
       
    }
    private void loadImages() {
        this.closeIcon = new ImageIcon(interfaceUtil.getImagesPath() + "cross-25px.png");
        labelClose.setIcon(closeIcon);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        labelRegisteredClients = new javax.swing.JLabel();
        labelSearchByName = new javax.swing.JLabel();
        textFieldSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableGuests = new javax.swing.JTable();
        buttonShowDetails = new javax.swing.JButton();
        buttonContinue = new javax.swing.JButton();
        labelClose = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 0, 102), 2, true));
        jPanel1.setMinimumSize(new java.awt.Dimension(500, 600));
        jPanel1.setPreferredSize(new java.awt.Dimension(500, 600));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelRegisteredClients.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        labelRegisteredClients.setText("Registered guests");
        jPanel1.add(labelRegisteredClients, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 8, -1, -1));

        labelSearchByName.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        labelSearchByName.setText("Search by name");
        jPanel1.add(labelSearchByName, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 36, -1, -1));

        textFieldSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textFieldSearchKeyReleased(evt);
            }
        });
        jPanel1.add(textFieldSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 57, 321, -1));

        tableGuests.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        tableGuests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Last name", "Date of birth"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableGuests.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tableGuests.setEditingColumn(0);
        tableGuests.setEditingRow(0);
        tableGuests.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableGuests.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tableGuests);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 460, 440));

        buttonShowDetails.setText("Show details");
        buttonShowDetails.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonShowDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonShowDetailsActionPerformed(evt);
            }
        });
        jPanel1.add(buttonShowDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 550, 203, 40));

        buttonContinue.setText("Continue");
        buttonContinue.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonContinue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonContinueActionPerformed(evt);
            }
        });
        jPanel1.add(buttonContinue, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 550, 203, 40));

        labelClose.setIcon(new javax.swing.ImageIcon("D:\\jaime\\Desktop\\Challengue-Hotel-Alura\\HotelAlura\\src\\main\\java\\com\\hotelAlura\\images\\cross-25px.png")); // NOI18N
        labelClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        labelClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labelCloseMouseClicked(evt);
            }
        });
        jPanel1.add(labelClose, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 10, 25, 25));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonShowDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonShowDetailsActionPerformed
        try {
            int selectedGuest = tableGuests.getSelectedRow();
            interfaceUtil.setSelectedGuest(this.guests.get(selectedGuest));
            interfaceUtil.showEditGuest();
        } catch (IndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "Any guest was selected.", "Information", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_buttonShowDetailsActionPerformed

    private void buttonContinueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonContinueActionPerformed
        try {
            int selectedGuest = tableGuests.getSelectedRow();
            interfaceUtil.setSelectedGuest(this.guests.get(selectedGuest));
            interfaceUtil.setLabelClient();
            
            dispose();
        } catch (IndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "Any guest was selected.", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
        
    }//GEN-LAST:event_buttonContinueActionPerformed

    private void textFieldSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldSearchKeyReleased
        updateList();
        searchInList(this.guests, textFieldSearch.getText());
         fillTable();
    }//GEN-LAST:event_textFieldSearchKeyReleased

    private void labelCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labelCloseMouseClicked
        dispose();
    }//GEN-LAST:event_labelCloseMouseClicked
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonContinue;
    private javax.swing.JButton buttonShowDetails;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelClose;
    private javax.swing.JLabel labelRegisteredClients;
    private javax.swing.JLabel labelSearchByName;
    private javax.swing.JTable tableGuests;
    private javax.swing.JTextField textFieldSearch;
    // End of variables declaration//GEN-END:variables

    
    public void updateList(){
        interfaceUtil.setGuestsList(GuestController.getGuestsList());
        this.guests = interfaceUtil.getGuestsList();
    }
    public void cleanSearch(){
        textFieldSearch.setText("");
    }
    
    public void fillTable() {
        
        model = (DefaultTableModel) tableGuests.getModel();
        model.setRowCount(0);
        this.guests.forEach(guest -> {
            model.addRow(new Object[]{guest.getGuestName(), guest.getGuestLastName(), guest.getGuestBirthday()});
        });

    }

    private void searchInList(List<Guest> guests, String text) {
        List<Guest> result = new ArrayList<>();
        for (Guest guest : guests) {
            if (guest.getGuestName().toLowerCase().contains(text.toLowerCase())) {
                result.add(guest);
            }
        }
        if (text.isEmpty()) {
            updateList();
            fillTable();
        }
        this.guests = result;
        fillTable();
    }
}
